{% set nginx = pillar.get('nginx', {}) -%}
{% set user = nginx.get('user', 'www-data') -%}
{% set group = nginx.get('group', 'www-data') -%}
{% set ips = salt['network.interfaces']()['eth0']['inet'] -%}
user   {{ user }} {{ group }};
worker_processes  {{ grains['num_cpus'] }};

error_log /var/log/nginx/error.fifo warn;
pid {{ nginx.get('pid', '/var/run/nginx.pid') }};
daemon {{ nginx.get('daemon', 'off') }};

events {
    worker_connections {{ nginx.get('events', {}).get('worker_connections', 1024) }};
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format main '$scheme://$host:$server_port$uri$is_args$args $remote_addr:$remote_user "$request" $request_time $request_length:$bytes_sent $status "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.fifo main;
    sendfile {{ nginx.get('sendfile', 'on') }};
    tcp_nopush {{ nginx.get('tcp_nopush', 'on') }};
    tcp_nodelay {{ nginx.get('tcp_nodelay', 'off') }};
    keepalive_timeout {{ nginx.get('keepalive_timeout', 65) }};
    server_names_hash_bucket_size {{ nginx.get('server_names_hash_bucket_size', 128) }};
    server_names_hash_max_size {{ nginx.get('server_names_hash_max_size', 1024) }};
    types_hash_max_size {{ nginx.get('types_hash_max_size', 8192) }};

    gzip {{ nginx.get('gzip', 'on') }};
    gzip_vary {{ nginx.get('gzip_vary', 'on') }};
    gzip_proxied {{ nginx.get('gzip_proxied', 'any') }};
    gzip_comp_level {{ nginx.get('gzip_comp_level', 6) }};
    gzip_buffers {{ nginx.get('gzip_buffers', '16 8k') }};
    gzip_http_version {{ nginx.get('gzip_http_version', '1.1') }};
    gzip_types {{ nginx.get('gzip_types', ['text/plain', 'text/css', 'application/json', 'application/x-javascript', 'text/xml', 'application/xml', 'application/xml+rss', 'text/javascript'])|join(' ') }};

{% if pillar['nginx'] is defined -%}

{% if pillar['nginx']['nginx_status']|default(False) %}
    # turn on nginx_status on localhost
    server {
        listen {{ ips[0].address }}:80;
        server_name {{ ips[0].address }};
        location /nginx_status {
            stub_status on;
            access_log off;
        }
    }
{% endif %}

{% if pillar['nginx']['redirect_numeric_ip']|default(False) %}
    server {
        server_name {% for ip in ips %}{{ ip['address'] }}:80{% if not loop.last %} {% endif %}{% endfor %};
        return 302 {{ pillar['nginx']['redirect_numeric_ip'] }};
        access_log off;
    }
{% endif %}

{% endif %}

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}
